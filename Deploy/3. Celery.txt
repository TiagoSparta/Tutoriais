[ CELERY e REDIS]
Celery é uma aplicação que trabalha com tarefas assíncronas. Usuário pode executar tarefas demoradas e não precisa ficar com a tela aberta pra executar, roda em segundo plano. Permite também agendar tarefas.

Redis é um banco em memória, extremamente rápido porém de curto prazo. Para filas do Celery é ideal pela velocidade e a desnecessidade de guardar dados a longo prazo.

-Redis
	-Instalar Redis
		$ sudo apt-get redis
		$ pip install redis (na virtual env)
	
	-Verificar se redis está rodando (mostra porta também)
		$ sudo /etc/init.d/redis-server status
			:Active: active (running) [...]
			:CGroup: [...] "/usr/bin/redis-server 127.0.0.1:6379"

- Celery
	https://docs.celeryq.dev/en/stable/index.html (geral)
	https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html (django)
	
	-Instalar Celery
		$ pip install celery
		
	-Criar arquivo celery.py dentro da pasta do projeto, ao lado do arquivo settings.py.
		- src/
		  - manage.py
		  - nome_projeto/
			- __init__.py
			- settings.py
			- urls.py
			- celery.py    <--------- aqui
			
		Conteúdo:
			import os
			from celery import Celery

			os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nome_projeto.settings')
			app = Celery('nome_projeto')
			app.config_from_object('django.conf:settings', namespace='CELERY')
			app.autodiscover_tasks()
			
			@app.task(bind=True)
			def debug_task(self):
				print(f'Request: {self.request!r}')
				
	- Alterar arquivo __init__.py (src/nome_projeto/__init__.py), acrescentando o seguinte texto:
		from .celery import app as celery_app

		__all__ = ('celery_app',)
	
	-Explicação:
		1. O celery é importado
			os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nome_projeto.settings')
		2. O app é criado
			app = Celery('nome_projeto')
		3. Faz o load
			app.config_from_object('django.conf:settings', namespace='CELERY')
		4. Faz o autodiscover_tasks
			app.autodiscover_tasks()
		5. Dentro de cada app o celery vai procurar um arquivo tasks.py
			- app1/
				- tasks.py
				- models.py
			- app2/
				- tasks.py
				- models.py
	
	-Criar arquivo tasks.py dentro da app desejada (exemplo abaixo)
		from demoapp.models import Widget

		from celery import shared_task


		@shared_task
		def add(x, y):
			return x + y


		@shared_task
		def mul(x, y):
			return x * y


		@shared_task
		def xsum(numbers):
			return sum(numbers)


		@shared_task
		def count_widgets():
			return Widget.objects.count()


		@shared_task
		def rename_widget(widget_id, name):
			w = Widget.objects.get(id=widget_id)
			w.name = name
			w.save()

-Celery Results
	-Instalar django-celery-results para ver o resultado das tarefas no admin
		$ pip install django-celery-results
		
	-Adicionar django_celery_results no INSTALLED_APPS do settings.py no projeto Django:
		INSTALLED_APPS = (
			...,
			'django_celery_results',
		)
	-Fazer migrate das tabelas de banco de dados do Celery:
		$ python manage.py migrate django_celery_results
	
	-Adicionar o CELERY_RESULT_BACKEND no settings.py para indicar ao celery onde vai guardar os resultados da execução de cada task.
		CELERY_RESULT_BACKEND = 'django-db'
	
	-Acrescentar no settings.py também o código abaixo, indicando a utilização do Redis para fila de tarefas e serialização json
		CELERY_BROKER_URL = 'redis://localhost:6379'
		CELERY_ACCEPT_CONTENT = ['application/json']
		CELERY_RESULT_SERIALIZER = 'json'
		CELERY_TASK_SERIALIZER = 'json'
		CELERY_TIMEZONE = TIME_ZONE
		
- Fazer push no servidor de todas as alterações, realizar migrações e instalação dos pacores

- Dar comando para rodar o celery
	-Ativar VirtualEnv
		$ source pasta_venv/bin/activate
	-Ir para pasta do projeto
		$ cd /media/pasta_projeto
	-Dar comando do Celery
		$ celery -A nome_projeto worker -l INFO

- Testando tasks com debug_task
	-Ao rodar o celery com o comando "celery -A nome_projeto worker -l INFO" vai aparecer uma lista das tasks, dentre elas "nome_projeto.celery.debug_task".
	-Abrir outro terminal e, com a VirtualEnv ativada, rodar o shell do Django e rodar a task teste com 'delay()'
		$ python manage.py shell
		>>> from nome_projeto.celery import debug_task
		>>> debug_task.delay()
	-Ao rodar o comando acima o terminal onde está aparecendo os logs do celery vai indicar "received" e a execução vai aparecer em "Task results" no Django admin, indicando que o celery está recebendo as tarefas.
	-O teste pode ser feito com todas as tarefas criadas, sempre dando .delay() para capturar.

- Criando task que aciona com o carregamento da página
	-Certifique que existe o arquivo tasks.py dentro da pasta do app. No arquivo, criar a task com os comandos para serem executados.
		from celery import shared_task
		from django.core.mail import send_mail

		@shared_task
		def send_email():
			send_mail(
				"Assunto do email",
				f"Este é o corpo do email",
				'remetente@gmail.com',
				['destinatário@gmail.com'],
				fail_silently=False,
			)
			return True

		@shared_task
		def celerytest():
			print("executando teste celery")
			
			return True
	-Na view do app, criar uma request para a página, rodando a task prevista no tasks.py com o comando '.delay()'
		from apps.nome_app.tasks import send_email, celerytest
		
		def send_mail_celery(request):
			send_email.delay()
			return HttpResponse("Email enviado com sucesso!")

		def teste_celery(request):
			celerytest.delay()
			return HttpResponse("Foi")
			
	-No urls.py do app, adicionar uma url para rodar o comando
		from .view import send_mail_celery, teste_celery
		path('celery/', send_mail_celery, name='celery'),
		path('celerytest/', teste_celery, name='ce-test'),
	-Ao acessar a url, o celery vai capturar a task e gravar o resultado da execução no banco.
	-Mesmo que seja um processamento demorado, a página vai renderizar independentemente. O celery vai rodar os comandos em segundo plano.
	
-Tarefas agendadas do celery (Celery Beat)
	-https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html
	-Instalar Celery Beat
		$ pip install django-celery-beat
		
	-Registrar no settings.py
		INSTALLED_APPS = (
			...,
			'django_celery_beat',
		)
	-Fazer migrate
		$ python manage.py migrate
	
	- Atualizar requirements.txt
		$ pip freeze > requirements.txt
		
	-Fazer push na máquina local e pull no servidor
	-No terminal conectado à instância, rodar os workers e o celery beat
		$ celery -A nome_projeto worker -l INFO -B --scheduler django_celery_beat.schedulers:DatabaseScheduler


-Resumo dos comandos de terminal do celery
	-Comando normal de rodar o celery, puro, no linux (somente worker)
		$ celery -A nome_projeto worker -l INFO
	
	-Rodar os celery workers no windows
		$ celery -A nome_projeto worker --pool=solo -l INFO
	
	-Rodar celery beat no windows (deve ser rodado em conjunto com o comando do worker em terminais diferentes)
		$ celery -A proj beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
		
	-Celery worker e beat no linux
		$ celery -A nome_projeto worker -l INFO -B --scheduler django_celery_beat.schedulers:DatabaseScheduler

-Configurar celery no systemctl para start no boot
	-Acessar a pasta do systemctl
		$ cd /etc/systemd/system
	- Criar arquivo celery.service na pasta acessada
		$ sudo vim celery.service
		
		[Unit]
		Description=Celery Service
		After=network.target #indica que vai iniciar depois da rede

		[Service]
		Type=forking
		User=ubuntu
		Group=ubuntu
		WorkingDirectory=/caminho/para/projeto
		ExecStart=/bin/sh -c '/home/ubuntu/venv/bin/celery -A nome_projeto worker -l INFO -B --scheduler django_celery_beat.schedulers:DatabaseScheduler &'
		ExecStop=/bin/kill -s TERM $MAINPID

		[Install]
		WantedBy=multi-user.target
		
	-Atenção: o &' no final do comando ExecStart visa impedir o encerramento do processo por timeout. Muito importante.
	
	-Trocar a permissão do arquivo criado
		$ sudo chmod 664 celery.service
	
	-Reiniciar systemctl
		$ sudo systemctl daemon-reload
	
	-Habilitar o serviço
		$ sudo systemctl enable celery.service
		
	-Dar start no serviço
		$ sudo systemctl start celery.service
	
	-Checar status
		$ sudo systemctl status celery.service
	
	-Verificar logs de retorno no terminal (prints que o comando do ExecStart retorna, como se tivesse sido rodado direto no terminal)
		$ journalctl -u celery.service