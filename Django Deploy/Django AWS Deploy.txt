--- Deploy Django AWS ---
-Iniciar nova Instância AWS
	-Em Imagens de Aplicação, escolher Ubuntu Server na versão mais nova que tiver
	-Atribuir IP público automaticamente (Auto-assign Public IP)
		-Importante habilitar para ter IP fixo
		-HD até 30 GB
	-Security Group
		-SSH TCP 22
		-Custom TCP TCP 80
		
-Instalar POSTGRESS e configurar banco de dados
	-Instalar
	$ sudo apt-get install postgresql postgresql-contrib
	$ sudo -i -u postgres (acessar usuario do linux postgres)
	$ psql (entra no psql)
	# \conninfo (ver dados conexão)
	# \l (listar bancos)
	# \password postgres (colocar senha no usuario padrao)
	# CREATE EXTENSION adminpack; (instalar pacote de ferramentas de administração do banco de dados
	# \q (volta para terminal linux)
	-Criar novo usuário
		$ createuser -dPs nome_usuario
		$ psql
		#\du (listar usuarios)
	- Logar com novo usuário
		$ psql -U novo_usuario
			- FATAL: Peer authentication failed for user
			- Erro porque usuário não está no pg_hba.conf
			$ sudo vim /etc/postgresql/versao/main/pg_hba.conf
				# Database administrative login by Unix domain socket
				local     all     postgres         md5
				local     all     novo_usuario     md5
			$ sudo systemctl restart postgresql
		$ psql -U nome_usuario
			- FATAL: database "novo_usuario" does not exist
			- Se não indicar banco vai tentar logar no banco com mesmo nome que usuário
		$ psql -U nome_usuario nome_banco_de_dados
			Ex: $ psql -U nome_usuario postgres
	-Criar banco
		# CREATE DATABASE nome_banco;

-Alterar Locale para brasil
	-Verificar Locale atual
		$ locale
	-Listar locais instalados
		$ locale -a
	-Se não tiver pt_BR.UTF-8
		$ sudo locale-gen pt_BR.UTF-8
		: pt_BR.UTF-8… done
		: Generation complete.
	-Reconfigurar pacotes após estarem instalados
		$ sudo dpkg-reconfigure locales
		-Verificar se pt_BR.UTF-8 está marcado
		-Escolher também na última tela
		: Generation Complete
	-Atualizar idioma padrão
		$ sudo update-locale LANG=pt_BR.UTF-8
	-Consultas o valor definido em LANG
		$ cat /etc/default/locale
		: LANG=pt_BR.utf8
	-Reiniciar instância
		$ sudo reboot
		
-Verificar se a máquina tem python3
	$ python3
	$ python --version (atualmente usando 3.8.10)
	
	-Instalação python3.8 de repositório externo
		$ sudo apt install software-properties-common -y
		$ sudo add-apt-repository ppa:deadsnakes/ppa -y
		$ sudo apt update
		$ sudo apt install python3.8 -y
		$ python3.8 --version
		-Atribuir alias 'python' ao comando 'python3.8'
			$ alias python=python3.8

-Criar VirtualEnv
	$ python3 -m venv NOME_VENV
	- Instalação venv no python3.8 quando não nativo
		$  sudo apt install python3.8-venv
	

-Ativar VirtualEnv
	$ source NOME_VENV/bin/activate


-Clonar projeto na VirtualEnv
	-Criar chave para conexão ssh com GitHub
		$ ssh-keygen -t ed25519 -C "your_email@example.com"
			: Generating public/private algorithm key pair.
		-Quando aparecer a solicitação "Enter a file in which to save the key" (Insira um arquivo no qual salvar a chave), presssione Enter. O local padrão do arquivo será aceito.
		-Digite uma frase secreta segura no prompt.
	-Verificar chaves existentes (se foi criada)
		$ ls -al ~/.ssh
			: lista de arquivos na pasta '.ssh'. As chaves são os arquivos .pub
	-Verificar chaves SSH existentes
		$ eval "$(ssh-agent -s)"
			 : AGENT pid 59566
		$ ssh-add ~/.ssh/id_ed25519
			: id_ed25519 (email)
	-Adicionar a chave criada à conta GitHub
		-Copiar chave para área de transferência
			$ clip < ~/.ssh/id_ed25519.pub
			# Copies the contents of the id_ed25519.pub file to your clipboard
			-Se comando clip não funcionar usar comando cat e copiar texto direto do terminal
		-No site do GitHub, clicar no perfil > settings >access > SSH and GP keys > New SSH key ou Add SSH key
		-Adicionar etiqueta no title e colar chave no campo key
		-Clicar em Add SSH key
	-Clonar diretório efetivamente
		$ git clone git@github.com:NOME_USUARIO/NOME_REPOSITORIO.git

-Instalar uWSGI
	- https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html
	-Sair de todas as virtualenvs
	-Instalar python dev
		$ sudo apt-get install pythonX.Y-dev
		Ex: sudo apt-get install python3.8-dev
	-Instalar pip se necessário
		$ sudo apt install python-pip
	-Instalar uWSGI
		$ pip install uwsgi
	-Criar arquivo test.py (em qualquer lugar)
		def application(env, start_response):
		start_response('200 OK', [('Content-Type','text/html')])
		return [b"Hello World"] # python3
	-Rodar uWSGI
		$ uwsgi --http :8000 --wsgi-file test.py
			: Browser retorna a frase "Hello World"
	-Rodar projeto django
		-Ir para pasta do projeto (src)
		$ uwsgi --http :8000 --module NOME_PROJETO.wsgi
			-Se debug=False vai retornar error 500.