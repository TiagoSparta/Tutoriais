- Inicializar diretório
	$ git init

- Clonar repositório
	$ git clone https://github.com/libgit2/libgit2
	ou
	$ git clone https://github.com/libgit2/libgit2 novoNomePasta
	
-Ciclo de vida dos arquivos
	- Untracked		-> Arquivo presente no diretório mas reconhecido pelo git
					   Ocorre logo quando cria um novo arquivo, sem ter feito "git add"
					   ou quando um arquivo é removido do git com "git rm"
					   
	- Staged		-> Área onde vai ser criada a versão, onde o arquivo foi adicionado ao rastreio do git com "git add",
					   pronto para commit

	- Modified 		-> Arquivo foi adicionado ao git (git add), podendo ou não ter sofrido commit, e foi posteriormente modificado

	- Unmodified 	-> Arquivo passou por commit, tendo sido criada a nova versão, e não foi modificado desde então


	- Verificar status dos arquivos
		- Normal
			$ git status
		- Curto
			$ git status -s

- Rastrear arquivos novos (enviar para o stage)
	- Arquivo individual
		$ git add nome_do_arquivo
	- Todos os untracked
		$ git add .
		$ git add --all
		$ git add --A
		$ git add ./dir_especídico/*

- Ignorar arquivos
	- Criar arquivo chamado .gitignore, contendo nomes dos arquivos e/ou extensões a serem ignoradas
	- Cada nome ou extensão deve estar em uma linha individual
		# ignorar arquivos com extensão .a
		*.a

		# mas rastrear o arquivo lib.a, mesmo que você esteja ignorando os arquivos .a acima
		!lib.a

		# ignorar o arquivo TODO apenas no diretório atual, mas não em subdir/TODO
		/TODO

		# ignorar todos os arquivos no diretório build/
		build/

		# ignorar doc/notes.txt, mas não doc/server/arch.txt
		doc/*.txt

		# ignorar todos os arquivos .pdf no diretório doc/
		doc/**/*.pdf
		
- Visualizar alterações
	- Antes de mandar para o stage
		$ git diff
	- Depois de mandar para o stage
		$ git diff --staged
		ou
		$ git diff --cached
	- Somente nome dos arquivos modificados
		$ git diff --name-only
		
- Remover arquivo do stage
	- Primeiro remover o arquivo do disco
		$ rm nome_arquivo
	- Remover do stage
		$ git rm nome_arquivo
	- Para remover do stage e manter arquivo no disco (esqueceu de colocar no .gitignore)
		$ git rm --cached README
	- Passando arquivos, diretórios e padrões de nomes
		$ git rm log/\*.log (remove todos arquivos .log)
		$ git rm \*~ (remove todos os arquivos cujos nomes terminem com um ~)

- Fazendo Commit das alterações
	O commit fecha um pacote com as alterações até o momento.
	- Commit simples, de arquivos vindo do stage
		$ git commit -m "mensagem explicando as modificações"
	- Pular área de stage, fazendo commit de arquivos untracked	(-a)
		$ git commit -a -m 'mensagem'
