# importar biblioteca socket, que permite manipular conexões
import socket


'''
criar socket com argumentos família e tipo
AF_INET indica família IPV4
SOCK_STREAM indica tipo TCP
SOCK_DGRAM indica tipo UDP
'''
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#print(client)

'''usar método connect((endereço, porta)) para conectar'''
#client.connect(("google.com", 80))
'''
enviar dados com método send(dados_em _bytes)
para converter string para bytes usar b'texto' ou 'texto'.encode()
"texto".encode permite caracteres de acento
'''
#client.send("Esses são os dados".encode())

'''receber dados com método .receb(tamanho_em_bytes).decode()'''
# client.recv(1024).decode()

'''
para ter resposta na porta 80 enviar requisição http
os \n do final separa o cabeçalho da requisição, fazendo entender ser uma requisição http
'''
#requisicao = "GET / HTTP/1.1\nHost: www.google.com\n\n\n".encode()
#client.send(requisicao)

#pacotes_recebidos = client.recv(1024).decode()
#print(pacotes_recebidos)

# Exemplo de conexão TCP
# abrir conexão na máquina pelo terminal com "nc -lvp 4466"

client.settimeout(10) # esperar um segundo para estabelecer conexão, senão fechar conexão
try:
    client.connect(("127.0.0.1", 4466))
    client.send("Dados enviados pelo socket python água\n".encode())
    pacotes_recebidos = client.recv(1024).decode()
    print(pacotes_recebidos)
except Exception as error:
    print("Erro na conexão.")
    print(error)